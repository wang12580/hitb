defmodule Stat.CompService do
  alias Stat.Key

  def target1()do
    ["机构分析_基础分析", "机构绩效_机构效率", "机构绩效_机构工作量", "机构绩效_机构绩效", "财务指标_机构收入", "财务指标_医保控费", "医疗质量_重返率", "医疗质量_治愈效果", "医疗质量_手术质量", "医疗质量_负性事件", "统计分析_病案统计", "统计分析_输血统计",  "统计分析_肿瘤统计", "统计分析_新生儿统计", "统计分析_手术统计"]
  end

  def target(file) do
    target =  %{"机构分析_基础分析" => ["机构分析_基础分析"], "机构绩效_机构效率" => ["机构绩效_机构效率_床位指标"], "机构绩效_机构工作量" => ["机构绩效_机构工作量_医疗检查工作量", "机构绩效_机构工作量_医疗治疗工作量", "机构绩效_机构工作量_医技工作量", "机构绩效_机构工作量_重症监护室工作量"], "机构绩效_机构绩效" => ["机构绩效_机构绩效_低风险组统计", "机构绩效_机构绩效_中低风险组统计", "机构绩效_机构绩效_中高风险组统计", "机构绩效_机构绩效_高风险组统计"],
    "财务指标_机构收入" => ["财务指标_机构收入_医疗收入", "财务指标_机构收入_医疗治疗收入", "财务指标_机构收入_医技收入", "财务指标_机构收入_管理收入", "财务指标_机构收入_耗材收入", "财务指标_机构收入_西药制品收入", "财务指标_机构收入_中药收入", "财务指标_机构收入_护理收入"],
    "财务指标_医保控费" => ["财务指标_医保控费_本市城镇职工基本医疗保险患者支付统计", "财务指标_医保控费_外埠城镇职工基本医疗保险患者支付统计", "财务指标_医保控费_本市城镇居民基本医疗保险患者支付统计", "财务指标_医保控费_外埠城镇居民基本医疗保险患者支付统计", "财务指标_医保控费_本市新型农村合作医疗患者支付统计", "财务指标_医保控费_外埠新型农村合作医疗患者支付统计", "财务指标_医保控费_贫困救助患者支付统计", "财务指标_医保控费_商业医疗保险患者支付统计", "财务指标_医保控费_全公费患者支付统计", "财务指标_医保控费_全自费患者支付统计", "财务指标_医保控费_其他社会保险患者支付统计", "财务指标_医保控费_其他患者支付统计"],
    "医疗质量_重返率" => ["医疗质量_重返率", "医疗质量_重返率_重返情况"], "医疗质量_治愈效果" => ["医疗质量_重返率_离院情况"], "医疗质量_手术质量" => ["医疗质量_重返率_手术质量分析", "医疗质量_重返率_负性事件分析"],
    "医疗质量_负性事件" => ["医疗质量_负性事件_压疮", "医疗质量_负性事件_护理", "医疗质量_负性事件_药物", "医疗质量_负性事件_输血", "医疗质量_负性事件_感染", "医疗质量_负性事件_跌倒、坠床"],
    "统计分析_病案统计" => ["统计分析_病案统计_病案质量统计", "统计分析_病案统计_病案统计", "统计分析_病案统计_DRG病案入组统计"],
    "统计分析_输血统计" => ["统计分析_输血统计_Rh阳性全血使用统计", "统计分析_输血统计_Rh阴性全血使用统计", "统计分析_输血统计_血型统计", "统计分析_输血统计_RH阳性患者统计", "统计分析_输血统计_RH阴性患者统计", "统计分析_输血统计_RH不详患者统计", "统计分析_输血统计_成分血统计", "统计分析_输血统计_患者来源统计", "统计分析_输血统计_诊断依据统计"],
    "统计分析_肿瘤统计" => ["统计分析_肿瘤统计_分化统计", "统计分析_肿瘤统计_发病部分统计", "统计分析_肿瘤统计_肿瘤患者T0期统计", "统计分析_肿瘤统计_肿瘤患者N0期统计", "统计分析_肿瘤统计_肿瘤患者M0期统计"],
    "统计分析_新生儿统计" => ["统计分析_新生儿统计_新生儿出生统计", "统计分析_新生儿统计_分娩方式统计", "统计分析_新生儿统计_新生儿出生缺陷统计", "统计分析_新生儿统计_出生胎数统计"],
    "统计分析_手术统计" => ["统计分析_手术统计_麻醉统计", "统计分析_手术统计_甲类切口统计", "统计分析_手术统计_乙类切口统计", "统计分析_手术统计_其他切口统计", "统计分析_手术统计_手术级别统计"], "" => []}
    index = Map.get(target, file) |> Enum.map(fn x -> Stat.page_en(x) end)
    index = index
      |>Enum.map(fn x ->
          case Key.tool(x) do
            [] -> Key.key("", "", "", "", x)
            _ ->
              Key.tool(x)
              |>Enum.map(fn x -> x.en end)
              |>Enum.map(fn x2 -> Key.key("", "", "", x2, x) end)
          end
        end)
      |>List.flatten|>List.delete("org")|>List.delete("time")|>:lists.usort
      |>Enum.map(fn x -> Key.cnkey(x) end)
    %{index: index, dimension: ["时间", "机构", "病种"]}
  end
end
